------------------------------
Prerequisites
------------------------------

Erlang >= R12B-5 is required;
Mochiweb >= r99 required from http://code.google.com/p/mochiweb/ (with utf8 support in mochijson2).

------------------------------
Running Probix server
------------------------------

    $ git clone git@github.com:esobchenko/probix.git
    $ cd probix
    $ erl -make
    $ ./bin/acceptance.sh # all tests should pass.
    $ ./bin/start.sh

Probix server binds to 0.0.0.0:8000 by default, however you can change this
by setting PROBIX_SERVER_IP and PROBIX_SERVER_PORT environment variables.

------------------------------
Probix server REST API
------------------------------

Currently there are two main entities implemented: object, probe.

Object - is a representation of monitoring object, parameter that is monitored.
Probe - is a single measurement value for a specific Object.

Following REST interface should be used to access data:

| Method  | URL                    |  Request data | Response data |
--------------------------------------------------------------------
| GET     | /objects               | none          | [ object ]    |
| GET     | /object/Id             | none          | object        |
| PUT     | /object/Id             | object        | object        |
| POST    | /object                | object        | object        |
| DELETE  | /object/Id             | none          | none          |
| GET     | /object/Id/probes      | none          | [ probe ]     |
| GET     | /object/Id/probes?Args | none          | [ probe ]     |
| POST    | /object/Id/probes?Args | probe         | none          |
| POST    | /object/Id/probes?Args | [ probe ]     | none          |
--------------------------------------------------------------------

object: {
    id: Integer,
    name: String,
    info: String
}

[ object ]:
    array of objects

probe: {
    id: Integer,
    id_object: Integer,
    timestamp: Timestamp,
    value: Value
}

[ probe ]:
    array of probes

Args for GET:
    * from=Timestamp
    * to=Timestamp

Args for POST:
    * show=1

Important: we use unix epoch as probe timestamp for now; the agents may work in
different timezones so we will reconsider this later.

------------------------------
Probix server formats
------------------------------

Currently Probix server accepts JSON as a representation format. Support for
XML and other formats is going to be implemented in future.

Use following URI pattern to specify the desired representation format:
http://host:port/resource/path/.format

For example to fetch object with id 15 as XML you should use:
http://host:port/object/15.xml

To create probes for object with id 5 from JSON you should use
http://host:port/object/5/probe.json

To fetch probes in XML within specific time range:
http://host:port/object/5/probes.json?from=time1&to=time2

--------------------------------
Probix server return codes
--------------------------------

The API attempts to return appropriate HTTP status codes for every request.
Here's what's going on with our various status codes:

200 OK: everything went awesome.
400 Bad Request: your request is invalid, and we'll return an error message that tells you why.
401 Not Authorized: either you need to provide authentication credentials, or the credentials provided aren't valid.
403 Forbidden: we understand your request, but are refusing to fulfill it. An accompanying error message should explain why.
404 Not Found: either you're requesting an invalid URI or the resource in question doesn't exist (ex: no such object).
406 Not Acceptable: you tried to set representation format that isn't known or supported
500 Internal Server Error: we did something wrong.

--------------------------------
Probix server error struct
--------------------------------

{
    code: String
    message: String
}

Where:
 * "code" is a special error code (e.g. bad_request or not_found)
 * "message" is a human readable error message


